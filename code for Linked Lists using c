#include <stdio.h>
#include <conio.h>
#include <stdlib.h>
struct node
{
int d;
struct node *next;
};
struct node *start = NULL;
void insertbegin(int);
void insertend(int);
void display_list();
void delete_begin();
void delete_end();
int c = 0;
void main ()
{
int i, d;
for (;;) {
printf("\n1. Beginning Insert.\n");
printf("\n2. End Insert.\n");
printf("\n3. Display linked list.\n");
printf("\n4. Beginning Delete.\n");
printf("\n5. End Delete.\n");
printf("\n6. Exit\n");
scanf("%d", &i);
if (i == 1)
{
printf("\nEnter an element for beginning insertion: ");
scanf("%d", &d);
insert_begin(d);
}
else if (i == 2)
{
printf("\nEnter an element for ending insertion: ");
scanf("%d", &d);
insert_end(d);
}
else if (i == 3)
display_list();
else if (i == 4)
delete_begin();
else if (i == 5)
delete_end();
else if (i == 6)
break;
else
printf("\nInvalid input.");
}
getch();
}
void insert_begin(int x)
{
struct node *t;
t = (struct node*)malloc(sizeof(struct node));
t -> d = x;
c++;
if (start == NULL) {
start = t;
start -> next = NULL;
return;
}
t -> next = start;
start = t;
}
void insert_end(int x)
{
struct node *t, *temp;
t = (struct node*)malloc(sizeof(struct node));
t -> d = x;
c++;
if (start == NULL)
{
start = t;
start -> next = NULL;
return;
}
temp = start;
while (temp->next != NULL)
temp = temp->next;
temp -> next = t;
t -> next = NULL;
}
void display_list()
{
struct node *t;
t = start;
if (t == NULL)
{
printf("There is no element in the linked list.\n");
return;
}
printf("There are %d elements in linked list.\n", c);
while (t->next != NULL)
{
printf("%d ", t->d);
t = t->next;
}
printf("%d ", t->d);
}
void delete_begin()
{
struct node *t;
int k;
if (start == NULL)
{
printf("There's no element in the list.\n");
return;
}
k = start -> d;
t = start -> next;
free(start);
start = t;
c--;
printf("%d deleted from the beginning of the linked list.\n", k);
}
void delete_end()
{
struct node *t, *v;
int k;
if (start == NULL)
{
printf("Linked list is empty.\n");
return;
}
c--;
if (start->next == NULL)
{
k = start->d;
free(start);
start = NULL;
printf("%d deleted from the end of the linked list.\n", k);
return;
}
t = start;
while (t->next != NULL) {
v = t;
t = t->next;
}
k = t -> d;
v -> next = NULL;
free(t);
printf("%d deleted from end successfully.\n", k);
}
